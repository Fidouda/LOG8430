package Commands;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

//Tutoriel suivi sur
//http://www.javaworld.com/article/2077260/learn-java/learn-java-the-basics-of-java-class-loaders.html
public class ClassLoader extends java.lang.ClassLoader {
	
	//Lorsque nous recherchons une classe, nous devons retrouver celle qui a été instantié. La hashmap nous assure que nous retournons la bonne classe
	private HashMap<String, Class<?>> tableDesClasses;
	
	public synchronized Class loadClass(String className, boolean resolveIt) throws ClassNotFoundException 
	{ 
		 Class result; 
		 byte classData[]; 
		 System.out.println(" >>>>>> Load class : "+className);
		 
		 /* Check our local cache of classes */ 
		 result = (Class)tableDesClasses.get(className); 
		 if (result != null) 
		 { 
			 System.out.println(" >>>>>> returning cached result."); 
			  return result; 
		 }
		 try { 
			    result = super.findSystemClass(className); 
			    System.out.println(" >>>>>> returning system class (in CLASSPATH)."); 
			    return result; 
			 } 
		 catch (ClassNotFoundException e) 
		 { 
			System.out.println("        >>>>>> Not a system class."); 
		 } 
		 /* Try to load it from our repository */ 
		 classData = getClassImplFromDataBase(className); 
		 if (classData == null) { 
		     throw new ClassNotFoundException(); 
		 }
		 result = (Class<?>) (classData, 0, classData.length); 
	}
	
	private byte[] getClassImplFromDataBase(String className)
	{
		String path = className;
		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		byte[] buffer = new byte[8000];

		int compteur;
		    
		try {
			InputStream is = new FileInputStream(path);
			while ((compteur = is.read(buffer)) > 0) {
				bytes.write(buffer, 0, compteur);
			}
			is.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		 
		return bytes.toByteArray();
	}

}
