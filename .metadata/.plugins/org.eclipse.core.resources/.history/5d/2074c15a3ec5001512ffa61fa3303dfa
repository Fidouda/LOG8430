package View;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextPane;

import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.JTextField;
import java.awt.Font;
import javax.swing.JFileChooser;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import Controller.Controller;
import javax.swing.JCheckBox;

import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;

import java.io.File;
import javax.swing.JScrollPane;

import java.util.Observable;
import java.util.Observer;

import Controller.Controller;
import Model.SimpleModel;

public class GraphicUserInterface implements Observer {

	private Controller controller;
	private SimpleModel model;
	
	private JFrame frame;
	private JTextField reponse1;
	private JTextField reponse2;
	private JTextField reponse3;
	private JTextField reponse4;
	private JTextField reponse5;
	private JButton boutonFichier;
	private JButton boutonClear;
	
	private File root;
	private javax.swing.JTree tree;
	private JScrollPane scrollPane;
	

	/**
	 * Create the application.
	 */
	public GraphicUserInterface(SimpleModel modelToSet, Controller controllerToSet) {
		model = modelToSet;
		controller = controllerToSet;
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.getContentPane().setBackground(Color.LIGHT_GRAY);
		frame.setBounds(250, 100, 598, 485);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(15, 44, 207, 325);
		frame.getContentPane().add(scrollPane);
		
		JSeparator separator = new JSeparator();
		separator.setOrientation(SwingConstants.VERTICAL);
		separator.setBackground(Color.DARK_GRAY);
		separator.setForeground(Color.DARK_GRAY);
		separator.setBounds(237, 44, 28, 325);
		frame.getContentPane().add(separator);
		
		JButton boutonCommande1 = new JButton("Commande 1");
		boutonCommande1.setFont(new Font("Tahoma", Font.PLAIN, 10));
		boutonCommande1.setBounds(247, 44, 97, 40);
		frame.getContentPane().add(boutonCommande1);
		
		reponse1 = new JTextField();
		reponse1.setEditable(false);
		reponse1.setBounds(354, 44, 120, 40);
		frame.getContentPane().add(reponse1);
		reponse1.setColumns(10);
		
		JButton boutonCommande2 = new JButton("Commande 2");
		boutonCommande2.setFont(new Font("Tahoma", Font.PLAIN, 10));
		boutonCommande2.setBounds(247, 109, 97, 40);
		frame.getContentPane().add(boutonCommande2);
		
		JButton boutonCommande3 = new JButton("Commande 3");
		boutonCommande3.setFont(new Font("Tahoma", Font.PLAIN, 10));
		boutonCommande3.setBounds(247, 172, 97, 40);
		frame.getContentPane().add(boutonCommande3);
		
		JButton boutonCommande4 = new JButton("Commande 4");
		boutonCommande4.setFont(new Font("Tahoma", Font.PLAIN, 10));
		boutonCommande4.setBounds(247, 239, 97, 40);
		frame.getContentPane().add(boutonCommande4);
		
		reponse2 = new JTextField();
		reponse2.setEditable(false);
		reponse2.setColumns(10);
		reponse2.setBounds(354, 109, 120, 40);
		frame.getContentPane().add(reponse2);
		
		reponse3 = new JTextField();
		reponse3.setEditable(false);
		reponse3.setColumns(10);
		reponse3.setBounds(354, 172, 120, 40);
		frame.getContentPane().add(reponse3);
		
		reponse4 = new JTextField();
		reponse4.setEditable(false);
		reponse4.setColumns(10);
		reponse4.setBounds(354, 239, 120, 40);
		frame.getContentPane().add(reponse4);
		
		JSeparator separator_1 = new JSeparator();
		separator_1.setForeground(Color.DARK_GRAY);
		separator_1.setBackground(Color.DARK_GRAY);
		separator_1.setBounds(237, 367, 247, 19);
		frame.getContentPane().add(separator_1);
		
		boutonClear = new JButton("Clear");
		boutonClear.addActionListener(controller);
        model.addObserver(this);
        boutonClear.setActionCommand("clearButton");
		
		
		
		boutonClear.setBounds(237, 380, 107, 40);
		frame.getContentPane().add(boutonClear);
		
		JCheckBox checkAutoRun = new JCheckBox("Auto Run");
		checkAutoRun.setBackground(Color.LIGHT_GRAY);
		checkAutoRun.setBounds(381, 389, 97, 23);
		frame.getContentPane().add(checkAutoRun);
		
		JButton boutonCommande5 = new JButton("Commande 5");
		boutonCommande5.setFont(new Font("Tahoma", Font.PLAIN, 10));
		boutonCommande5.setBounds(247, 302, 97, 40);
		frame.getContentPane().add(boutonCommande5);
		
		reponse5 = new JTextField();
		reponse5.setEditable(false);
		reponse5.setColumns(10);
		reponse5.setBounds(354, 302, 120, 40);
		frame.getContentPane().add(reponse5);
		
		//Boutton fichier
		boutonFichier = new JButton("Select file/folder");
		boutonFichier.addActionListener(controller);
        boutonFichier.setActionCommand("browseButton");

		boutonFichier.setBounds(25, 380, 175, 40);
		frame.getContentPane().add(boutonFichier);
	}
	
	private void genererArbre(File racine){
		//ARBRE
		tree = new JTree(new DefaultTreeModel(getTree(null, racine)));
		
		//Lorsqu'on clique sur un element de l'arbre
		tree.addTreeSelectionListener(new TreeSelectionListener() {
			public void valueChanged(TreeSelectionEvent arg0) {
				if(tree.getSelectionPath() == null)
					return;
				
				String selectedNodeWPath = "";
				
				for(Object part : tree.getSelectionPath().getPath())
					selectedNodeWPath += part.toString();
				
				System.out.println(selectedNodeWPath);
			}
		});
		scrollPane.setViewportView(tree);
		scrollPane.repaint();
	}
	
	//http://www.java2s.com/Code/Java/File-Input-Output/DisplayafilesysteminaJTreeview.htm
	private DefaultMutableTreeNode getTree(DefaultMutableTreeNode top, File repertoire){
		DefaultMutableTreeNode currentNode;
		
		//Si top est null, c'est le root
		if(top != null){
			currentNode = new DefaultMutableTreeNode(repertoire.getName());
			top.add(currentNode);
		}
		else
			currentNode = new DefaultMutableTreeNode(repertoire.getAbsolutePath());
		
		if(!repertoire.isDirectory())
			return currentNode;
		
		if(repertoire.listFiles() != null){
			for(File fichier : repertoire.listFiles()){
				if(fichier.canRead())
					getTree(currentNode, fichier);
			}
		}
		
		return currentNode;
	}
	
	public JScrollPane getScrollPane(){
		return scrollPane;
	}
	
	public JFrame getFrame(){
		return frame;
	}
	
	public JButton getBoutonFichier(){
		return boutonFichier;
	}
	
	public JButton getBoutonClear(){
		return boutonClear;
	}
	
	public void setScrollPane(JScrollPane scrollToSet){
		scrollPane = scrollToSet;
	}
	
	public void setFrame(JFrame frameToSet){
		frame = frameToSet;
	}
	
	public void setBoutonFichier(JButton buttonToSet){
		boutonFichier = buttonToSet;
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		System.out.println("Je suis dans la methode update");
		
		switch(arg1.toString()){
		
		case "Create Tree":
			scrollPane.setViewportView(model.getTree());
			scrollPane.repaint();
			break;
		case "Clear Tree": 
			//model.setTree(new Jtree); getTree()
			//JFrame frameTemp =  getFrame();
			//frameTemp.getContentPane().remove(window.getScrollPane());
			
			frame.remove(scrollPane);
			
			JScrollPane scrollPaneTemp = new JScrollPane();
			scrollPaneTemp.setBounds(15, 44, 207, 325);
			scrollPane = scrollPaneTemp;
			frame.add(scrollPane);
			scrollPane.repaint();
			
			break;
		}
	
	}

	
	
}
